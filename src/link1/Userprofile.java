/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Userprofile.java
 *
 * Created on Jan 21, 2014, 2:08:44 PM
 */
package link1;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.*;
import java.util.*;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;


import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import javax.swing.JFileChooser;

    /**
 *
 * @author Seban
 */
public class Userprofile extends javax.swing.JFrame {
    private final static Userprofile user=new Userprofile();
    static int usize=0;
    private Hashtable<Integer, String> hprdHastable = new Hashtable<Integer, String>();
   // static int col;
    static ArrayList<String> uniqueProtein = new ArrayList<String>();
    static ArrayList<String> uniqueProtein1 = new ArrayList<String>();
    static ArrayList<String> combinedarray = new ArrayList<String>();
    static ArrayList<String> test_sample=new ArrayList<String>();
    static ArrayList<String> target_sample=new ArrayList<String>();
    static ArrayList<String> main_sample = new ArrayList<String>();
    static int[][] weight;
//    static int[][] weight = new int[uniqueProtein.size()][uniqueProtein.size()];

    /** Creates new form Userprofile */
    public Userprofile() {
        initComponents();
    }

    public void setStatusMessage(String message) {
        jLabel5.setText(message);
    }

    public void clearStatusMessage() {
        jLabel5.setText("");
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel1.setText("Enter your PPI data: ");

        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Eg: BRCA1 TP53", "PMA BRCA2" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(jList1);

        jButton2.setText("SUBMIT");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel2.setText("Percentage of Sampling");

        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Times New Roman", 3, 13));
        jLabel3.setText("LINK PREDICTION");

        jLabel4.setText("Status: ");

        jLabel5.setForeground(new java.awt.Color(0, 102, 0));

        jLabel6.setText("Percentage of Training Data");

        jLabel7.setText("Percentage of Test Data");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(77, 77, 77)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7))
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField3)
                            .addComponent(jTextField1)
                            .addComponent(jTextField2, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE))))
                .addContainerGap(174, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 72, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(100, 100, 100)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(19, 19, 19)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(11, 11, 11)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGap(31, 31, 31)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(283, 283, 283)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGap(0, 40, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(233, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(89, 89, 89)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addGap(21, 21, 21))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 49, Short.MAX_VALUE)
                    .addComponent(jLabel3)
                    .addGap(30, 30, 30)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(14, 14, 14)
                            .addComponent(jLabel1)
                            .addGap(14, 14, 14)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(202, 202, 202)
                    .addComponent(jButton2)
                    .addGap(43, 43, 43)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    static int perc2;
    String s0 = null;
    static int tot_intr;
    int inv = 0;
    int flag = 0;
     int col;
     static ArrayList<String> orginteraction = new ArrayList<String>();
     static Map<String, Integer> unsortMap = new HashMap<String, Integer>();

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        
        jButton2.setEnabled(false);

        new Thread(new Runnable() {

            public void run() {

                try {
                    if (hprdHastable.size() == 0) {
                        setStatusMessage("Reading HPRD...");
                        readhprdfile();
                    }

                    setStatusMessage("Reading Input...");

                    String val = jTextArea1.getText();
                    try {
                        perc2 = Integer.parseInt(jTextField2.getText());

                        } catch (Exception e) {
                        perc2 = 0;
                        jTextField2.setText("0");
                    }

                    ArrayList orgProtein1 = new ArrayList();
                    ArrayList orgProtein2 = new ArrayList();
                    //FileWriter f_out = null;

                    //File f = new File("D:/input.txt"); //inserting user input into input.txt file
                    //if (f.exists()) {
                    //} else {
                       // f.createNewFile();
                  //  }
                   // f_out = new FileWriter(f);
                    //System.out.println("helllooo..."+val);
                    String[] strs = val.split("\\n");

                    //ArrayList<String> allItems = new ArrayList<String>();
                    //Collections.addAll(allItems, allItemsArray); to convert a string to an arraylist

                    //sampling starts here....
                    //Random sampling...

                   /* Random randomGen = new Random();
                    int requiredNumOfItems = allItems.size() * perc2 / 100;

                    String[] strs = new String[requiredNumOfItems];

                    for (int c = 0; c < requiredNumOfItems; c++) {

                        int index = randomGen.getRandom(0, allItems.size() - 1);
                        strs[c] = allItems.get(index);

                        allItems.remove(index);

                    }*/
                   /* ArrayList freqofprotein=new ArrayList();
                     int pcount=0;
                    for (int i = 0; i < orgProtein1.size(); i++) {
                       String s=(String)orgProtein1.get(i);
                       for(int j=0;j<orgProtein1.size();j++)
                       {
                           if(s.equals((String)orgProtein1.get(j)))
                           {
                             pcount++;
                           }
                       }


                    }*/






                    ArrayList Protein1 = new ArrayList();
                    ArrayList Protein2 = new ArrayList();


                   tot_intr = strs.length;

                    for (int i = 0; i < tot_intr; i++) {

                        //f_out.write(strs[i]);
                        //f_out.write(System.getProperty("line.separator"));

                        String tab_cut[] = strs[i].split("\\s+");
                        if (tab_cut.length != 2) {
                            System.out.println("error....");
                            javax.swing.JOptionPane.showMessageDialog(null, "Invalid Input - 1!! Len: " + tab_cut.length);
                            break;
                        }
                        String combined = tab_cut[0].trim() + tab_cut[1].trim();

                        if (!hprdHastable.containsValue(combined)) {
                            System.out.println("Not found in hprd: " + tab_cut[0].trim() + "," + tab_cut[1].trim() + " .Not added...");
                            javax.swing.JOptionPane.showMessageDialog(null, "Not found in hprd: " + tab_cut[0].trim() + "," + tab_cut[1].trim() + " .Removing...");

                        } else {
                            Protein1.add(tab_cut[0]);
                            Protein2.add(tab_cut[1]);

                        }

                    }

                   
                    Set<String> unique = new HashSet<String>(Protein1);
                    for (String key : unique) {
                        System.out.println(key + ": " + Collections.frequency(Protein1, key));
                        unsortMap.put(key, Collections.frequency(Protein1, key));

                    }
                    System.out.println(unsortMap);

                    Set<String> unique1 = new HashSet<String>(Protein2);

                    for (String key : unique1) {
                        System.out.println(key + ": " + Collections.frequency(Protein2, key));

                        if(unsortMap.containsKey(key)){
                            int total  = Collections.frequency(Protein2, key)+unsortMap.get(key);
                             unsortMap.put(key, total);
                        }
                         else{
                                unsortMap.put(key, Collections.frequency(Protein2, key));
                         }


                    }
                     //System.out.println(unsortMap);


                     //***************************************
                    

                    SortMapByValue sort=new SortMapByValue();
                     sort.sortfun();
                    List<Entry<String, Integer>> list = new LinkedList<Entry<String, Integer>>(sort.sortedMap.entrySet());


                     int intercount=0,jk=0;
                     int requiredNumOfItems= tot_intr * perc2 / 100;

                     System.out.println("Total no of interactions in input:"+tot_intr);

                    for (Entry<String, Integer> entry : list)
                     {

                        System.out.println("hashentry..."+jk+".... KEY: "+entry.getKey()+" VAL: "+entry.getValue());
                        String hashentry=entry.getKey();
                        jk++;
                       for(int i=0;i<Protein1.size();i++)
                       {
                           if(hashentry.equals(Protein1.get(i))||hashentry.equals(Protein2.get(i))){



                            intercount++;
                            orginteraction.add(Protein1.get(i) + "\t" + Protein2.get(i));

                            //orgProtein1.add(Protein1.get(i));
                              //orgProtein2.add(Protein2.get(i));

                            if(intercount>=requiredNumOfItems)
                                break;
                            }
                       }
                       if(intercount>=requiredNumOfItems)
                                break;
                     }

                     System.out.println("original interaction");
                    System.out.println(orginteraction);




//*********************************************************************************************************

                    try{
        String stest=jTextField1.getText();
        String starget=jTextField2.getText();
        int test_perc=Integer.parseInt(stest);
		int target_perc=Integer.parseInt(starget);

		/*File f = new File("D:/input.txt");
		BufferedReader bufferedReader = new BufferedReader(new FileReader(f));
            String line;*/

		//ArrayList main_sample=new ArrayList();

		int[] arr=new int[1000];
                int i;
		//while ((line = bufferedReader.readLine()) != null) {
                    int x=0;
                    System.out.println("org size"+orginteraction.size());
                for(i=0;i<orginteraction.size();i++)
                {
                            
				main_sample.add(orginteraction.get(i));
                                x++;
                                
		}
                System.out.println("test test"+x);
		int sample_size=main_sample.size();
		int d_test=(test_perc*sample_size)/100;
		int d_target=(target_perc*sample_size)/100;
		int test=Math.abs(d_test);
		int target=Math.abs(d_target);
		 i=0;
                int j,k=0,flag2=0,hit=0;
		//System.out.println("hii1");
		while(i<=(test)){
			//System.out.println("hii2");
		int flag=0;
                int mede=main_sample.size()-2;
		int randomIndex = 1+ (int)(Math.random() * ((mede-1)+ 1));
		//i++;
		//System.out.println(randomIndex);

		for(j=0;j<k;j++)
		{
			if(randomIndex==arr[j]){
                                System.out.println("random "+j);
				flag=1;
				break;
			}
		}
		if(flag==0)
		{
			i++;
                        
			test_sample.add(main_sample.get(randomIndex));
			arr[k]=randomIndex;
			k++;
		}

		}
		k--;
		for(j=0;j<sample_size;j++)
		{
			for(i=0;i<k;i++)
			{
				if(j==arr[i])
				{
					flag2=1;
					break;
				}
			}
			if(flag2==0){
                            System.out.println("entry");
			target_sample.add(main_sample.get(j));
                        }
			flag2=0;
		}
		System.out.println("Total no. of input protein pairs: "+(sample_size));
		System.out.println("No. of protein-pairs in test data: "+(test));
		System.out.println("No. of protein-pairs in target data: "+(target));

		System.out.println("\n\nTEST DATA:");
		for (i = 0; i < test_sample.size(); i++)
		{
			System.out.println(test_sample.get(i));
		}

		System.out.println("\n\nTARGET DATA:");
		for (i = 0; i < target_sample.size(); i++)
		{
			System.out.println(target_sample.get(i));
		}
        }
        catch(Exception e)
        {
            System.out.println(e);
        }

                    //ArrayList<String> combinedOrgProtein = new ArrayList<String>();



                    for (String s : test_sample)
		{
			String[] temp;
			temp = s.split("\t",3);
			
                        orgProtein1.add(temp[0]);
                        orgProtein2.add(temp[1]);
			
		}

                   /* for (int i = 0; i < orgProtein1.size(); i++) {
                        combinedOrgProtein.add((String) orgProtein1.get(i) +"\t"+ (String) orgProtein2.get(i));
                      //  combinedOrgProtein.add((String) orgProtein1.get(i) +(String) orgProtein2.get(i));
                    }*/

                    ArrayList<String> uniqueProtein = new ArrayList<String>();
                  //  ArrayList<String> combinedarray = new ArrayList<String>();
                    String protein;
                    for (int i = 0; i < orgProtein1.size(); i++) {
                        protein = (String) orgProtein1.get(i);

                        if (!uniqueProtein.contains(protein)) {
                            uniqueProtein.add(protein);

                        }
                        protein = (String) orgProtein2.get(i);

                        if (!uniqueProtein.contains(protein)) {
                            uniqueProtein.add(protein);
                        }


                    }
                    System.out.println("uniqueProtein size: " + uniqueProtein.size());
                    for (int i = 0; i < uniqueProtein.size(); i++) {
                        System.out.println(uniqueProtein.get(i));
                    }
                    col=uniqueProtein.size();
                    System.out.println("Column size"+col);

                     weight = new int[uniqueProtein.size()][uniqueProtein.size()];



                    for (int i = 0; i < uniqueProtein.size(); i++) {
                        for (int j = 0; j < uniqueProtein.size(); j++) {

                            String rowProtein = uniqueProtein.get(i);
                            String colProtein = uniqueProtein.get(j);

                            String combined = rowProtein +"\t"+ colProtein;
                           // String combined = rowProtein +colProtein;
                            combinedarray.add(combined);

                           String combinedReverse = colProtein+"\t"+rowProtein;

                            for (int k = 0; k < test_sample.size(); k++) {
                                if (test_sample.get(k).toString().equals(combined) || test_sample.get(k).toString().equals(combinedReverse)) {
                                    weight[i][j] = ++weight[i][j];
                                }
                            }

                        }
                    }
                    //Propflow pf=new Propflow();
                    //pf.flow(weight,col);

                    System.out.println("MATRIX");
                    usize=uniqueProtein.size();

                    for (int i = 0; i < uniqueProtein.size(); i++) {
                        System.out.print("\t\t" + uniqueProtein.get(i));
                        uniqueProtein1.add(uniqueProtein.get(i));
                    }
                    System.out.println();
                    for (int i = 0; i < uniqueProtein.size(); i++) {
                        for (int j = 0; j < uniqueProtein.size(); j++) {
                            if (j == 0) {
                                System.out.print(uniqueProtein.get(i) + "\t\t");
                            }
                            System.out.print(weight[i][j] + "\t\t");

                        }
                        System.out.println();

                    }
                    Propflow pf=new Propflow();
                    pf.flow(weight,col,uniqueProtein,combinedarray,target_sample);

                    System.out.println("combined array");
                   for (int i = 0; i < combinedarray.size(); i++) {
                      String value = (String) combinedarray.get(i);
                      System.out.println(value);
                    }

                    /*
                    for (int i = 0; i < uniqueProtein.size(); i++) {
                    for (int j = 0; j < uniqueProtein.size(); j++) {

                    System.out.print(matrix[i][j]+"\t");

                    }
                    System.out.println();

                    }

                     */

                    System.out.println("\n"+"\n"+"array1");
                    for (int i = 0; i < orgProtein1.size(); i++) {
                        String value = (String) orgProtein1.get(i);
                        System.out.println(value);
                    }

                    System.out.println("array2");
                    for (int i = 0; i < orgProtein2.size(); i++) {
                        String value = (String) orgProtein2.get(i);
                        System.out.println(value);
                    }


                    //f_out.write(val);
                   // f_out.close();


                    setStatusMessage("Validating Input...");


                } catch (Exception e) {
                    e.printStackTrace();
                }


                jButton2.setEnabled(true);

            }
        }).start();

 //Outputlist ls=new Outputlist();
        dispose();
  new Outputlist().setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void readhprdfile() {
        hprdHastable = new Hashtable<Integer, String>();
       // File f = new File("E:/College/Project/Code/Input/hprd.txt");
         File f = new File("D:/hprd.txt");
        try {
            BufferedReader bufferedReader = new BufferedReader(new FileReader(f));
            String line;
            String combined;
            int lineNum = 1;
            while ((line = bufferedReader.readLine()) != null) {
                //System.out.println("Reading line: " + lineNum);
                String lineItems[] = line.split("\t");

                if (lineItems.length != 2) {
                    System.err.println("Failed to read at line " + lineNum);
                    continue;
                }

                combined = lineItems[0].trim() + lineItems[1].trim();
                hprdHastable.put(lineNum, combined);

                // masterInput.containsValue("ALDH1A1ALDH1A1");

                lineNum++;
                

            }

        } catch (Exception ex) {
            Logger.getLogger(Userprofile.class.getName()).log(Level.SEVERE, null, ex);
        }

 //Propflow pf=new Propflow();
  // pf.flow(weight,col);
            

    }
   
    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static Userprofile getInstance( ) {
      return user;
    }
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new Userprofile().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    // End of variables declaration//GEN-END:variables
}
